extend type Mutation {
  createEvent(input: EventInput!): Event!
}

extend type Query {
  eventsByVenue(venue: String!): [Event]
}

enum EventType {
  CONFERENCE
  FESTIVAL
  CONCERT
}

interface Event {
  id: ID!
  name: String!
  startsAt: String
  endsAt: String
  venue: String!
  minAgeRestriction: Int
}

type Concert implements Event {
  id: ID!
  name: String!
  startsAt: String
  endsAt: String
  venue: String!
  minAgeRestriction: Int
  performingBands: [String] # Concert
}

type Festival implements Event {
  id: ID!
  name: String!
  startsAt: String
  endsAt: String
  venue: String!
  minAgeRestriction: Int
  performers: [String] # Festival
}

type Conference implements Event {
  id: ID!
  name: String!
  startsAt: String
  endsAt: String
  venue: String!
  minAgeRestriction: Int
  speakers: [String] # Conference
  workshops: [String] #Conference
}

input EventInput {
  name: String!
  type: EventType!
  startsAt: String
  endsAt: String
  venue: String!
  minAgeRestriction: Int
  speakers: [String]
  workshops: [String]
  performers: [String]
  performingBands: [String]
}
